#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === Repo Environment Starter for CM ===
function repos()
{
  local currentdir=${PWD}; repor;
  if [ -f ./build/envsetup.sh ]; then
    local device=$(getine "$1" "huashan");
    source ./build/envsetup.sh; croot;
    breakfast $device;
  else
    echo "Android Repo not found...";
  fi;
  cd "$currentdir";
}

# === Repo Environment Starter for AOSP ===
function reposaosp()
{
  local currentdir=${PWD}; repor;
  if [ -f ./build/envsetup.sh ]; then
    local device=$(getine "$1" "huashan");
    source ./build/envsetup.sh; croot;
    lunch aosp_${device}-userdebug;
  else
    echo "Android Repo not found...";
  fi;
  cd "$currentdir";
}

# === Repo Sync Project ===
alias reposi='repo sync .';

# === Repo Sync Efficiently ===
alias reposy='repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags';

# === Repo Sync Clean ===
function reposycl()
{
  repo forall -c 'echo "Cleaning project ${REPO_PROJECT}"; \
                  git rebase --abort >/dev/null 2>&1; \
                  git stash -u >/dev/null 2>&1; \
                  git reset --hard HEAD >/dev/null 2>&1;';
  repo sync -j$(grep -c ^processor /proc/cpuinfo) --current-branch --detach -f --force-broken --force-sync -c --no-clone-bundle --no-tags;
}

# === Repo Study Projects ===
function reposup()
{
  echo '';
  repo forall -c 'git fetch --quiet ${REPO_REMOTE} ${REPO_RREV##*/}; \
                  changescount=$(git rev-list --left-only --count HEAD...FETCH_HEAD); \
                  if [ ${changescount} -ne 0 ]; then \
                    echo " Project ${REPO_PROJECT} : ${changescount} changes"; \
                  fi; \
                  if [ $(git diff --quiet; echo $?) -ne 0 ]; then \
                    echo ''; \
                    echo " Project ${REPO_PROJECT} : Differences"; \
                    git diff; \
                    echo ''; \
                  fi;' 2> /dev/null;
  echo '';
}

# === Repo CCache Status/Setter ===
function repocache()
{
  local currentdir=$(pwd);
  repor;
  if [ ! -z "$1" ]; then ./prebuilts/misc/linux-x86/ccache/ccache -M $1; fi;
  watch -n 1 -d "./prebuilts/misc/linux-x86/ccache/ccache" -s;
  cd $currentdir;
}

# === Repo CCache Cleaner ===
alias repocleancache='if [ ! -z "$CCACHE_DIR" ]; then rm -rfv "$CCACHE_DIR/"*; fi';

# === Build paths ===
export bash_android_flashable_zip=$bash_android_dir/android_files/flashable_template.zip;
export bash_kernel_template_zip=$bash_android_dir/android_files/kernel_template.zip;
export bash_android_twrp_fota_zip=$bash_android_dir/android_files/twrp_fota_template.zip;
export bash_android_twrp_multirom_zip=$bash_android_dir/android_files/twrp_multirom_template.zip;
export bash_android_sign_apk_dir=$bash_android_dir/android_signapk;
export bash_android_tools_mkuserimg=$bash_android_dir/android_tools/mkuserimg.sh;

# === Repo TWRP ===
repotwrp()
{
  export CurDir=${PWD};

  # Phone huashan
  PhoneName="$1";
  if [ -z "$PhoneName" ]; then
    PhoneName="huashan";
  fi;

  BuildParams="$2";
  if [ -z "$BuildParams" ]; then
    # Sources Sync
    repo sync --current-branch --detach --force-broken --force-sync --no-clone-bundle --no-tags;

    # Clean
    make clean;
  fi;

  # Make recovery
  source ./build/envsetup.sh;
  croot;
  RootDir=$(pwd);
  breakfast $PhoneName;
  make -j$(grep -c ^processor /proc/cpuinfo) recoveryimage $RootDir/out/target/product/$PhoneName/system/build.prop;
  echo "";

  # Make releases
  echo "  [ Making release files ]";
  echo "";
  TWRPVersion=$(grep TW_VERSION_STR bootable/recovery/variables.h | sed 's/.*\"\(.*\)\".*/\1/' | cut -c 1-5);
  TWRPImg=./out/target/product/$PhoneName/recovery.img;
  DateTag=$(date +'%Y%m%d');
  OutBootImg="twrp-$TWRPVersion-$DateTag-boot-${PhoneName}.img";
  OutFOTAZip="twrp-$TWRPVersion-$DateTag-fota-${PhoneName}.zip";
  OutMultiROMZip="twrp-$TWRPVersion-$DateTag-secondary-multirom-${PhoneName}.zip";
  OutTWRP="twrp.img";
  TargetDir="$(xdg-user-dir DESKTOP)";

  if [ -f "$TargetDir/$OutTWRP" ]; then rm -f "$TargetDir/$OutTWRP"; fi;
  if [ -f "$TargetDir/$OutBootImg" ]; then rm "$TargetDir/$OutBootImg"; fi;
  if [ -f "$TargetDir/$OutMultiROMZip" ]; then rm "$TargetDir/$OutMultiROMZip"; fi;
  if [ -f "$TargetDir/$OutFOTAZip" ]; then rm "$TargetDir/$OutFOTAZip"; fi;
  if [ -f "$TargetDir/$OutMultiROMZip.unsigned.zip" ]; then rm "$TargetDir/$OutMultiROMZip.unsigned.zip"; fi;
  if [ -f "$TargetDir/$OutFOTAZip.unsigned.zip" ]; then rm "$TargetDir/$OutFOTAZip.unsigned.zip"; fi;
  if [ ! -f "$TWRPImg" ]; then
    echo " Error: Output files missing";
    echo "";
    cd ${CurDir};
    return;
  fi;
  cp "$TWRPImg" "$TargetDir/$OutTWRP";
  cp "$TWRPImg" "$TargetDir/$OutBootImg";
  cp "$bash_android_twrp_fota_zip" "$TargetDir/$OutFOTAZip.unsigned.zip";
  cp "$bash_android_twrp_multirom_zip" "$TargetDir/$OutMultiROMZip.unsigned.zip";
  zip -j -g "$TargetDir/$OutFOTAZip.unsigned.zip" "$TargetDir/$OutTWRP";
  zip -j -g "$TargetDir/$OutMultiROMZip.unsigned.zip" "$TargetDir/$OutTWRP";
  cd ./out/target/product/$PhoneName/;
  zip -g "$TargetDir/$OutMultiROMZip.unsigned.zip" -r "system/build.prop";
  cd ../../../../;
  java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
       -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
       "$bash_android_sign_apk_dir/testkey.pk8" \
       "$TargetDir/$OutFOTAZip.unsigned.zip" \
       "$TargetDir/$OutFOTAZip";
  java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
       -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
       "$bash_android_sign_apk_dir/testkey.pk8" \
       "$TargetDir/$OutMultiROMZip.unsigned.zip" \
       "$TargetDir/$OutMultiROMZip";
  rm -f "$TargetDir/$OutFOTAZip.unsigned.zip";
  rm -f "$TargetDir/$OutMultiROMZip.unsigned.zip";
  rm -f "$TargetDir/$OutTWRP";

  echo "";
  echo -e " \e[1;37mPackage Boot File:\e[0m $TargetDir/$OutMultiROMZip";
  echo -e " \e[1;37mPackage FOTA File:\e[0m $TargetDir/$OutFOTAZip";
  echo "";

  # Flash new image
  echo "";
  echo "  [ Install TWRP on the '$PhoneName' ]";
  echo "";
  printf "  Flash Recovery to FOTA (y/N) ? ";
  read -t 10 key;
  if [[ "$key" == "y" || "$key" == "Y" ]] && [ -f $TWRPImg ]; then
    echo "";
    adb root;
    timeout 5 adb wait-for-device;
    adb push $TWRPImg /tmp/twrp.img;
    if [ ! -z "$(adb shell 'ls /system/bin/dd 2> /dev/null')" ]; then
      adb shell /system/bin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    else
      adb shell /sbin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    fi;
    adb reboot recovery;
  else
    echo "";
  fi;

  # Upload new release
  UploadFolder="${PhoneName^}/TWRP-Recovery";
  echo "";
  echo "";
  echo "  [ Publish to BasketBuilt '$UploadFolder' ]";
  echo "";
  printf "  Upload (Y/n) ? ";
  read -t 30 key;
  echo "";
  if [[ ! "$key" == "n" && ! "$key" == "N" ]]; then
    fileupl "$TargetDir/$OutBootImg" "$UploadFolder";
    fileupl "$TargetDir/$OutMultiROMZip" "$UploadFolder";
    fileupl "$TargetDir/$OutFOTAZip" "$UploadFolder";
  fi;

  echo "";
  cd ${CurDir};
}

# === Repo MultiROM ===
repomrom()
{
  export CurDir=${PWD};
  PhoneParams="$1";
  BuildParams="$2";

  # Phone huashan
  PhoneName="huashan";

  # Device selection
  if [ ! -z "$PhoneParams" ]; then
    PhoneName="$PhoneParams";
  fi;

  # Sources Sync
  if [[ ! "$BuildParams" =~ "nosync" ]]; then
    # Sources Sync
    repo sync --current-branch --detach --force-broken --force-sync --no-clone-bundle --no-tags;

    # MutiROM submodules
    cd ./system/extras/multirom/;
    git submodule update --init;
    git submodule update --force;
    cd ./../../../;
  fi;

  # Clean
  if [[ ! "$BuildParams" =~ "nowipe" ]]; then
    make clean;
  fi;

  # Kernels building
  if [[ "$BuildParams" =~ "kfetch" ]]; then
    cd ./kernel/sony/msm8960t/;
    git fetch AdrianDC "$3";
    git reset --hard FETCH_HEAD;
    git cherry-pick c1e3c40963f9126a9672ee724880c43b3a0aea9c;
    git cherry-pick 6715415a35153fd64d73b117f0f40d00db53ea35;
    cd ./../../../;
  fi;

  # Make recovery
  source ./build/envsetup.sh;
  if [[ ! "$BuildParams" =~ "nobuild" ]]; then
    rm -rf "$BuildDir/multirom"*
    RootDir=$(pwd);
    # Build
    breakfast $PhoneName;
    if [[ "$BuildParams" =~ "kernel" ]]; then
      make -j$(grep -c ^processor /proc/cpuinfo) multirom_kernel_zip;
    else
      make -j$(grep -c ^processor /proc/cpuinfo) recoveryimage multirom trampoline multirom_zip multirom_uninstaller;
    fi;
  else
    echo "Build skipped...";
  fi;
  echo "";

  # Make releases
  echo "  [ Making release files ]";
  echo "";
  DateTag=$(date +'%Y%m%d');
  TargetDir="$(xdg-user-dir DESKTOP)";
  BuildDir=./out/target/product/$PhoneName;
  cp $BuildDir/obj/ETC/system_build_prop_intermediates/build.prop $BuildDir/system/build.prop;

  # Built files
  BuiltInstaller="multirom-*-v33x-UNOFFICIAL-${PhoneName}.zip";
  BuiltKernel="multirom_kernel-*-v33x-UNOFFICIAL-${PhoneName}.zip";
  BuiltRecovery="recovery.img";
  BuiltUninstaller="multirom_uninstaller.zip";

  # Published files
  PublishDir="MultiROM-Android";
  PublishInstaller="$PublishDir/multirom-$DateTag-v33x-${PhoneName}.zip";
  if [ ! -z "$3" ]; then
    PublishKernel="$PublishDir/kernel-$DateTag-${PhoneName}-$3.zip";
  else
    PublishKernel="$PublishDir/kernel-$DateTag-${PhoneName}.zip";
  fi;
  PublishRecoveryFOTA="$PublishDir/multirom-$DateTag-recovery-fota-${PhoneName}.zip";
  PublishRecoveryMultiROM="$PublishDir/multirom-$DateTag-recovery-secondary-${PhoneName}.zip";
  PublishUninstaller="$PublishDir/multirom-$DateTag-uninstaller-${PhoneName}.zip";

  # Released files
  ReleaseDir="MultiROM-Release";
  ReleaseInstall="$ReleaseDir/multirom-$DateTag-v33x-UNOFFICIAL-${PhoneName}.zip";
  ReleaseRecovery="$ReleaseDir/multirom-$DateTag-recovery-${PhoneName}.img";
  ReleaseUninstall="$ReleaseDir/multirom-$DateTag-uninstaller-${PhoneName}.zip";

  if [ ! -f "$BuildDir/$BuiltRecovery" ]; then
    echo " Error: Output files missing";
    echo "";
    cd ${CurDir};
    return;
  fi;

  if [ ! -d "$TargetDir/$PublishDir" ]; then
    mkdir -p "$TargetDir/$PublishDir";
  fi;
  if [ ! -d "$TargetDir/$ReleaseDir" ]; then
    mkdir -p "$TargetDir/$ReleaseDir";
  fi;

  BuiltInstaller="$(find $BuildDir -maxdepth 1 -name $BuiltInstaller -print \
                | tail -n 1)";
  if [ ! -z "$BuiltInstaller" ]; then
    if [ -f "$TargetDir/$PublishInstaller" ]; then rm -f "$TargetDir/$PublishInstaller"; fi;
    cp "$BuiltInstaller" "$TargetDir/$PublishInstaller.unsigned.zip";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$PublishInstaller.unsigned.zip" \
        "$TargetDir/$PublishInstaller";
    rm -f "$TargetDir/$PublishInstaller.unsigned.zip";
    cp "$TargetDir/$PublishInstaller" "$TargetDir/$ReleaseInstall";
    stat --printf="%s " "$TargetDir/$ReleaseInstall" >"$TargetDir/$ReleaseInstall.md5sum";
    md5sum "$TargetDir/$ReleaseInstall" >>"$TargetDir/$ReleaseInstall.md5sum";
  fi;

  BuiltKernel="$(find $BuildDir -maxdepth 1 -name $BuiltKernel -print)";
  if [ ! -z "$BuiltKernel" ]; then
    if [ -f "$TargetDir/$PublishKernel" ]; then rm -f "$TargetDir/$PublishKernel"; fi;
    cp "$BuiltKernel" "$TargetDir/$PublishKernel.unsigned.zip";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$PublishKernel.unsigned.zip" \
        "$TargetDir/$PublishKernel";
    rm -f "$TargetDir/$PublishKernel.unsigned.zip";
  fi;

  if [ -f "$BuildDir/$BuiltUninstaller" ]; then
    if [ -f "$TargetDir/$PublishUninstaller" ]; then rm -f "$TargetDir/$PublishUninstaller"; fi;
    cp "$BuildDir/$BuiltUninstaller" "$TargetDir/$PublishUninstaller.unsigned.zip";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
         -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
         "$bash_android_sign_apk_dir/testkey.pk8" \
         "$TargetDir/$PublishUninstaller.unsigned.zip" \
         "$TargetDir/$PublishUninstaller";
    rm -f "$TargetDir/$PublishUninstaller.unsigned.zip";
    cp "$TargetDir/$PublishUninstaller" "$TargetDir/$ReleaseUninstall";
    stat --printf="%s " "$TargetDir/$ReleaseUninstall" >"$TargetDir/$ReleaseUninstall.md5sum";
    md5sum "$TargetDir/$ReleaseUninstall" >>"$TargetDir/$ReleaseUninstall.md5sum";
  fi;

  if [ -f "$BuildDir/$BuiltRecovery" ]; then
    cp "$BuildDir/$BuiltRecovery" "$TargetDir/twrp.img";
    if [ -f "$TargetDir/$PublishRecoveryFOTA" ]; then rm -f "$TargetDir/$PublishRecoveryFOTA"; fi;
    if [ -f "$TargetDir/$PublishRecoveryMultiROM" ]; then rm -f "$TargetDir/$PublishRecoveryMultiROM"; fi;
    cp "$bash_android_twrp_fota_zip" "$TargetDir/$PublishRecoveryFOTA.unsigned.zip";
    cp "$bash_android_twrp_multirom_zip" "$TargetDir/$PublishRecoveryMultiROM.unsigned.zip";
    cd ./out/target/product/$PhoneName/;
    zip -g "$TargetDir/$PublishRecoveryMultiROM.unsigned.zip" -r "system/build.prop";
    cd ../../../../;
    zip -j -g "$TargetDir/$PublishRecoveryFOTA.unsigned.zip" "$TargetDir/twrp.img";
    zip -j -g "$TargetDir/$PublishRecoveryMultiROM.unsigned.zip" "$TargetDir/twrp.img";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$PublishRecoveryFOTA.unsigned.zip" \
        "$TargetDir/$PublishRecoveryFOTA";
    java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
        -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
        "$bash_android_sign_apk_dir/testkey.pk8" \
        "$TargetDir/$PublishRecoveryMultiROM.unsigned.zip" \
        "$TargetDir/$PublishRecoveryMultiROM";
    rm -f "$TargetDir/$PublishRecoveryFOTA.unsigned.zip";
    rm -f "$TargetDir/$PublishRecoveryMultiROM.unsigned.zip";
    rm -f "$TargetDir/twrp.img";
    cp "$BuildDir/$BuiltRecovery" "$TargetDir/$ReleaseRecovery";
    stat --printf="%s " "$TargetDir/$ReleaseRecovery" >"$TargetDir/$ReleaseRecovery.md5sum";
    md5sum "$TargetDir/$ReleaseRecovery" >>"$TargetDir/$ReleaseRecovery.md5sum";
  fi;

  echo "";
  echo -e " \e[1;37mInstaller File:\e[0m $PublishInstaller";
  echo -e " \e[1;37mUninstaller File:\e[0m $PublishUninstaller";
  echo -e " \e[1;37mRecovery Boot File:\e[0m $PublishRecoveryMultiROM";
  echo -e " \e[1;37mRecovery FOTA File:\e[0m $PublishRecoveryFOTA";
  echo -e " \e[1;37mKernel File:\e[0m $PublishKernel";
  echo "";

  # Flash new image
  echo "";
  echo "  [ Install Recovery on the '$PhoneName' ]";
  echo "";
  printf "  Flash Recovery to FOTA (y/N) ? ";
  read -t 10 key;
  if [[ "$key" == "y" || "$key" == "Y" ]] && [ -f $TWRPImg ]; then
    echo "";
    adb root;
    timeout 5 adb wait-for-device;
    adb push "$BuildDir/recovery.img" /tmp/twrp.img;
    if [ ! -z "$(adb shell 'ls /system/bin/dd 2> /dev/null')" ]; then
      adb shell /system/bin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    else
      adb shell /sbin/dd if=/tmp/twrp.img of=/dev/block/platform/msm_sdcc.1/by-name/FOTAKernel;
    fi;
    adb reboot recovery;
  else
    echo "";
  fi;

  # Upload new release
  UploadFolder="${PhoneName^}/MultiROM-Android";
  echo "";
  echo "";
  echo "  [ Publish to BasketBuilt '$UploadFolder' ]";
  echo "";
  printf "  Upload (Y/n) ? ";
  read -t 30 key;
  echo "";
  if [[ ! "$key" == "n" && ! "$key" == "N" ]]; then
    fileupl "$TargetDir/$PublishInstaller" "$UploadFolder";
    fileupl "$TargetDir/$PublishRecoveryMultiROM" "$UploadFolder";
    fileupl "$TargetDir/$PublishRecoveryFOTA" "$UploadFolder";
  fi;

  echo "";
  cd ${CurDir};
}

# === Build TWRP ===
function mktwrp()
{
  CurDir=$(pwd);
  TmpDir=$(mktemp -d);
  BuildParams="$@";
  LogFile="$TmpDir/mmm_logs.txt";
  OutFile="TWRP-"$(date +'%Y%m%d-%H%M')"-$(basename $(readlink -f $1))-${PhoneName}.zip";
  TargetFile="$(xdg-user-dir DESKTOP)/$OutFile";

  if [ -z "$BuildParams" ]; then
    BuildParams=".";
  fi;

  echo "";
  mka recoveryimage;

  if [ -f ]; then
    cp "$FilePath" "$TmpDir/$FileTarget";
    FilesList="$FilesList ./$FileTarget";
  fi;

  cd "$TmpDir/";
  cp "$bash_android_flashable_zip" "$TmpDir/$OutFile.unsigned.zip";
  zip -g "$TmpDir/$OutFile.unsigned.zip" $FilesList;
  java -jar "$bash_android_sign_apk_dir/signapk-cm121.jar" \
       -w "$bash_android_sign_apk_dir/testkey.x509.pem" \
       "$bash_android_sign_apk_dir/testkey.pk8" \
       "$TmpDir/$OutFile.unsigned.zip" \
       "$TmpDir/$OutFile";
  rm -f "$TmpDir/$OutFile.unsigned.zip";
  cp "$TmpDir/$OutFile" "$TargetFile";
  echo "";
  echo -e " \e[1;37mPackage File:\e[0m $TargetFile";
  echo "";

  rm -rf "$TmpDir";
  cd "$CurDir";
}

