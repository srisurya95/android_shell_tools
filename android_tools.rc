#!/bin/bash
# ======================================
#   Developed by Adrian DC - 2015-2016
# ======================================

# === ADB Pushes ===
function adbpf()
{
  if [ ! -z "${1}" ]; then
    for filepath in ${@}; do
      filepath=$(readlink -f "${filepath}");
      if [ -d "${filepath}" ]; then
        adbpf "${filepath}/"*;
      else
        if [[ "${filepath}" =~ 'proprietary' ]]; then
          file=$(printf "${filepath}" | sed "s/.*proprietary\(.*\)/\/system\1/g");
        elif [[ "${filepath}" =~ 'system' ]]; then
          file=$(printf "${filepath}" | sed "s/.*\(system.*\)/\/\1/g");
        elif [[ "${filepath}" =~ '.xml' ]] || [[ "${filepath}" =~ '.conf' ]]; then
          file="/system/etc/"$(basename $filepath);
        elif [[ "${filepath}" =~ '.so' ]]; then
          file="/system/lib/"$(basename $filepath);
        else
          file=$(printf "${filepath}" | sed "s/.*\(system.*\)/\/\1/g");
        fi;
        echo "";
        echo -e " \e[1;36m${file} :\e[0m";
        printf "  ";
        adb shell ls -l "${file}" | cut -c 30-;
        printf "   ";
        adb push "${filepath}" "${file}";
      fi;
    done;
    echo "";
  fi;
}

# === Binary Editor ===
function binaryeditor()
{
  if [ -z "$2" ]; then
    echo " Usage : binaryeditor binariespath patternsearch [replacement]";
    return;
  fi;

  local FILES="$1";
  local PATTERN="$2";
  local REPLACEMENT="$3";
  local REPLACE="";
  local STRINGS="";
  PATTERN=${PATTERN//\*/.\*};
  PATTERN=${PATTERN//./.};

  echo "";
  if [ ! -z "${REPLACEMENT}" ]; then
    echo -e " \e[1;31m=== Replacing '${PATTERN}' with '${REPLACEMENT}' in ${FILES} ===\e[0m";
  else
    echo -e " \e[1;31m=== Searching '${PATTERN}' in ${FILES} ===\e[0m";
  fi;
  echo "";
  for FILE in $(find $FILES -not -path "*.git/*" -not -path "*.repo/*" | sort);
  do
    FILE=$(readlink -f "$FILE");
    if [ -d $FILE ]; then continue; fi;

    if [ ! -z "${REPLACEMENT}" ]; then
      STRINGS=$(strings ${FILE} | grep "${PATTERN}" | sort -u -r);

      if [ ! -z "${STRINGS}" ]; then
        printf "   \e[1;37m${FILE} :\e[0m ${STRINGS} ";
        for OLD_STRING in ${STRINGS};
        do
          NEW_STRING=${OLD_STRING//${PATTERN}/${REPLACEMENT}};

          OLD_STRING_HEX="$(echo -n ${OLD_STRING} | xxd -g 0 -u -ps -c 256)00";
          NEW_STRING_HEX="$(echo -n ${NEW_STRING} | xxd -g 0 -u -ps -c 256)00";

          if [ ${#NEW_STRING_HEX} -le ${#OLD_STRING_HEX} ]; then
            while [ ${#NEW_STRING_HEX} -lt ${#OLD_STRING_HEX} ];
            do
              NEW_STRING_HEX="${NEW_STRING_HEX}00";
            done;

            printf "\e[1;36m[y/N] \e[0m";
            read -s -d'' -s -n1 REPLACE;
            if [[ "${REPLACE}" == "y" || "${REPLACE}" == "Y" ]]; then
              hexdump -ve '1/1 "%.2X"' ${FILE} | \
                sed "s/${OLD_STRING_HEX}/${NEW_STRING_HEX}/g" | \
                xxd -r -p > ${FILE}.tmp;
              chmod --reference ${FILE} ${FILE}.tmp;
              mv ${FILE}.tmp ${FILE};
              echo -e "\e[1;32mDone!\e[0m";
            else
              echo -e "\e[1;33mIgnored.\e[0m";
            fi;
          else
            echo -e "\e[1;36m[N] \e[1;33mString too long...\e[0m";
          fi;
        done;
      else
        STRINGS=$(strings ${FILE} | grep ${REPLACEMENT} | sort -u -r);
        if [ ! -z "${STRINGS}" ]; then
          echo -e "   \e[1;37m${FILE}:\e[0m ${REPLACEMENT} \e[1;33mFound.\e[0m";
        fi;
      fi;

    else
      STRINGS=$(strings ${FILE} | grep "${PATTERN}" | sort -u -r | tr '\n' ',');
      if [ ! -z "${STRINGS}" ]; then
        echo -e "   \e[1;37m${FILE}:\e[1;33m ${STRINGS}\e[0m";
      fi;
    fi;
  done;
  echo "";
}

# === Audio LegacyToHAL helper ===
function audioltoh()
{
  if [ -z "$2" ]; then
    echo " Usage : audioltoh legacy_config hal_mixer [debug]";
    return;
  fi;

  Legacy="$1";
  HAL="$2";
  Debug="$3";
  TempFile=$(mktemp);

  echo "";
  echo -e " \e[1;37m === Checking Legacy rules to HAL presence ===\e[0m";
  echo "";
  grep -i -e "'.*'" "$Legacy" | uniq \
    | sed "s/^[ \t]*'\(.*\)'\:\(.*\)\:\(.*\)/\1/" \
    | sort | uniq >$TempFile;
  kate $TempFile;
  while read line; do
    if ! grep -q "$line" $HAL; then
      echo -e "   \e[1;33mLegacy: \e[1;34m$line - \e[1;31mMissing\e[0m";
    elif [ ! -z "$Debug" ]; then
      echo -e "   \e[1;33mLegacy: \e[1;34m$line - \e[1;34mFound\e[0m";
    fi;
  done < "$TempFile";
  echo "";
  echo -e " \e[1;34m > Done checking Legacy rules to HAL\e[0m";
  echo "";

  echo "";
  echo -e " \e[1;37m === Checking HAL rules to Legacy presence ===\e[0m";
  echo "";

return;

  grep -i -e "<ctl name=\"".*"\" value=\".*\" \/>" "$HAL" \
    | sort | uniq -u \
    | sed "s/.*name=\"\(.*\)\" .*value=\"\(.*\)\" \/>/\1 | \2/" >$TempFile;
  while read line;
  do
    if [ -z $(grep -q "$Line" "$HAL") ]; then
      echo -e "   \e[1;33mHAL: \e[1;34m$line - \e[1;31mMissing\e[0m";
    elif [ ! -z "$Debug" ]; then
      echo -e "   \e[1;33mHAL: \e[1;34m$line - \e[1;34mFound\e[0m";
    fi;
  done <$TempFile;
  echo "";
  echo -e " \e[1;34m > Done checking HAL rules to Legacy\e[0m";
  echo "";

  rm -f $TempFile;
}

# === Vendor Checker ===
function vendorcheck()
{
  if [ -z "$2" ]; then
    echo " Usage: vendorcheck deviceproprietarytx vendordevicedir";
    return;
  fi;

  local currentdir=${PWD};
  local repodir="$currentdir";
  while [[ "${repodir}" != '/' && ! -d "${repodir}/.repo" ]]; do
    repodir=$(readlink -f "${repodir}/..");
  done;
  if [ -d "${repodir}/.repo" ]; then
    cd ${repodir};
  fi;

  VendorDir="$2";
  VendorPhone=$(echo "$2" | sed 's/.*\/\([^\/]*\)\/proprietary.*/\1/');
  VendorMk="../$VendorPhone-vendor-blobs.mk";
  VendorError=0;
  echo ""; i=0;
  while read FilePath; do
    i=$((i+1));
    if [[ "$FilePath" =~ '#' ]] || [[ "$FilePath" == '' ]]; then
      continue;
    fi;
    if [[ "$FilePath" == -* ]]; then
      FilePath=$(echo "$FilePath" | cut -c2-);
    fi;
    if [[ "$FilePath" =~ ':' ]]; then
      FilePath=$(echo "$FilePath" | sed 's/\(.*\):\(.*\)/\2/');
    fi;
    if [ -f "$VendorDir/$FilePath" ]; then
      echo -e " \e[1;37mLine $i: $FilePath - File OK\e[0m";
    else
      echo -e " \e[1;31mLine $i: $FilePath - File Missing\e[0m";
      VendorError=$(($VendorError+1));
      sleep 0.1;
    fi;
  done < "$1";
  echo "";
  if [ $VendorError -gt 0 ]; then
    echo -e " \e[1;37m> Press Enter to continue...\e[0m";
    read key;
  fi;
  echo "";
  VendorError=0;
  i=0;
  for FilePath in $(find $VendorDir -type f | sort); do
    i=$((i+1));
    FilePath=$(echo "$FilePath" | sed 's/.*proprietary\/\(.*\)/\1/g');
    if [ ! -z $(grep -a "$FilePath" "$1" | head -1) ]; then
      echo -e " \e[1;37mLine $i: $FilePath - Reference OK\e[0m";
    elif [[ "$FilePath" =~ "RPM.bin" ]]; then
      echo -e " \e[1;33mLine $i: $FilePath - Reference Ignored\e[0m";
    else
      echo -e " \e[1;31mLine $i: $FilePath - Reference Missing\e[0m";
      VendorError=$(($VendorError+1));
      sleep 0.1;
    fi;
  done;
  echo "";
  if [ $VendorError -gt 0 ]; then
    echo -e " \e[1;37m> Press Enter to continue...\e[0m";
    read key;
  fi;
  i=0;
  TempFile=$(mktemp);
  TempFile2=$(mktemp);
  cat "$VendorDir/$VendorMk" \
    | sed 's/.*:system\/\([^\|]*\)\( \\\|\)/\1/g' \
    | sed '/^$/d' \
    | sed '/^#.*$/d' \
    | sed 's/^-//g' \
    | sed '/^PRODUCT_COPY_FILES.*$/d' \
    | sort > "$TempFile";
  cat "$1" \
    | sed '/^$/d' \
    | sed '/^#.*$/d' \
    | sed 's/^.*:\(.*\)$/\1/g' \
    | sed 's/^-//g' \
    | sort > "$TempFile2";
  echo "";
  echo " Cleaning the vendor blobs list...";
  FilesToAdd="";
  for FileLine in $(diff --old-line-format="-%L" \
                         --unchanged-line-format="#%L" \
                         --new-line-format="+%L" \
                         "$TempFile" "$TempFile2"); do
    FileStatus="${FileLine:0:1}";
    FilePath=$(echo "${FileLine:1}" | sed 's/\//\\\//g' | sed 's/\./\\./g');
    case "$FileStatus" in
      "+") FilesToAdd="$FilesToAdd ${FilePath//\\/}";;
      "-") sed -i "/$FilePath/d" "$VendorDir/$VendorMk";;
      *);;
    esac;
  done;
  echo "";
  echo " Populating the vendor blobs list...";
  i=$(awk '/PRODUCT_COPY_FILES/{print NR + 1}' "$VendorDir/$VendorMk");
  for FilePath in $FilesToAdd; do
    FileLine="vendor/sony/$VendorPhone/proprietary/$FilePath:system/$FilePath \\";
    FileCurrent=$(sed "$i!d" "$VendorDir/$VendorMk");
    while [ "    $FileLine" \> "$FileCurrent" ]  && [ ! -z "$FileCurrent" ]; do
      i=$((i+1));
      FileCurrent=$(sed "$i!d" "$VendorDir/$VendorMk");
    done;
    if [ -z "$FileCurrent" ]; then i=$((i-1)); fi;
    sed -i "${i}i\ \ \ \ $FileLine\\" "$VendorDir/$VendorMk";
  done;
  cat "$VendorDir/$VendorMk" \
    | sed 's/.*:system\/\([^\|]*\)\( \\\|\)/\1/g' \
    | sed '/^$/d' \
    | sed '/^#.*$/d' \
    | sed 's/^-//g' \
    | sed '/^PRODUCT_COPY_FILES.*$/d' \
    | sort > "$TempFile";
  echo "";
  meld "$TempFile" "$TempFile2";
  rm -f $TempFile $TempFile2;
  cd "$currentdir";
}

# === Vendor Checker Helper ===
function vendorch()
{
  if [ -z "$1" ]; then
    echo " Usage: vendorch devicename [vendor]";
    return;
  fi;

  local vendor="$2";
  if [ -z "$vendor" ]; then
    vendor="sony";
  fi;

  vendorcheck device/$vendor/$1/proprietary-files.txt vendor/$vendor/$1/proprietary;
}
